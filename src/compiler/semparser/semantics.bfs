#  Copyright (C) 2013 Michael Gilliland
#
#  This program is free software; you can redistribute it and/or
#  modify it under the terms of the GNU General Public License
#  as published by the Free Software Foundation; either version 2
#  of the License, or (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

<ident> ::= t_identifier -> ( $$ = BFIdentifier( $1 ) );
<param ident> ::= t_param_ident -> ( $$ = BFParamIdentifier( $1 ) );

<spec param> ::= <param ident> <ident>
               | t_comma <ident>;

# Literals:
<literal> ::= <int>
            | <float>
            | <char>
            | <string>;

# Numbers:
<int> ::= t_integer -> ( $$ = BFInteger( $1 ) );
<float> ::= t_float -> ( $$ = BFFloat( $1 ) );

# Showables:
<char> ::= t_char -> ( $$ = BFChar( $1 ) );
<string> ::= t_string -> ( $$ = BFString( $1 ) );

# Operators:

# Variable assign:
<is now> ::= t_kwd_isnow
	   | t_op_assign;

# General:
<math operator> ::= t_op_plus 
            | t_op_minus
            | t_op_times
            | t_op_divide
            | t_op_modulus
            | t_op_pow
            | t_op_concat;

# Assignment:
<assign> ::= <variable assign>
           | <const assign>
           | <poly assign>;

<statement> ::= <assign>
              | <exp>;

<exp> ::= t_paren_begin <exp> t_paren_end
        | <literal>
        | <ident>;

<module def> ::= t_kwd_module <ident> <block> -> ($$ = BFModuleDef( $1 ) );
<class def> ::= t_kwd_class <ident> <block> -> ($$ = BFClassDef( $1 ));
<meth def> ::= t_kwd_meth <ident> -> ($$ = BFClassDef( $1, $2 ))
             | t_kwd_methd <ident> <context> -> ($$ = BFClassDef( $1, $2 ) );

<context> ::= <ident> <spec param>* -> ($$ = BFMethodParam() );

<block> ::= t_block_begin ... t_block_end -> ( $$ = BFBlock() );

<variable assign> ::= <ident> <is now> <exp> -> ($$ = BFVariableAssign());
<const assign> ::= <ident> t_kwd_is <literal> -> ($$ = BFConstantAssign());
<poly assign> ::= t_kwd_forms <ident> t_kwd_are <ident> <other forms>* -> ($$ = BFPolyAssign());

<other forms> ::= t_pipe <ident>;
